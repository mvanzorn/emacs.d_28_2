;; Prerequisites:
;; Install Node
;; https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
;; Install nvm
;; npm i -g typescript-language-server; npm i -g typescript
;; npm i -g prettier

(eval-and-compile
  (customize-set-variable
   'package-archives '(("org" . "https://orgmode.org/elpa/")
                       ("melpa" . "https://melpa.org/packages/")
                       ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)))

;; TRAMP DEBUGGIN / OPTIMIZATION
(setq vc-handled-backends '(Git))
(setq tramp-verbose 1)
(setq tramp-default-method "ssh")

;; https://stackoverflow.com/questions/56105716/magit-over-tramp-re-use-ssh-connection 
(customize-set-variable
 'tramp-ssh-controlmaster-options
 (concat
   "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p "
   "-o ControlMaster=auto -o ControlPersist=yes"))
(customize-set-variable 'tramp-use-ssh-controlmaster-options nil)

;; End TRAMP

;; ;;Scrollkeeper 3-16-2022
;; (use-package scrollkeeper
;;   :ensure t)
;; (global-set-key [remap scroll-up-command] 'scrollkeeper-contents-up)
;; (global-set-key [remap scroll-down-command] 'scrollkeeper-contents-down)

;; Golden ratio mode 3-16-2022
;; (use-package golden-ratio
;; 	:ensure t)
;; (golden-ratio-mode 1)

;; Zoom mode - replacement for golden-ratio mode 3-16-2022
(use-package zoom
	:ensure t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(global-display-line-numbers-mode t)
 '(package-archives
	 '(("org" . "https://orgmode.org/elpa/")
		 ("melpa" . "https://melpa.org/packages/")
		 ("gnu" . "https://elpa.gnu.org/packages/")))
 '(package-selected-packages
	 '(emacsql-sqlite3 f3 wgrep ivy-posframe hydra-posframe org-roam move-text doom-modeline highlight-indent-guides doom-themes focus golden-ratio scrollkeeper -t undo-tree counsel-projectile treemacs-magit diff-hl lsp-treemacs ivy-hydra helpful octicons all-the-icons-ivy-rich ivy-rich counsel swiper beacon emmet-mode loccur treemacs-projectile treemacs-all-the-icons treemacs yasnippet-snippets js-react-redux-yasnippets yasnippet embark-consult embark marginalia orderless vertico rainbow-delimiters all-the-icons telephone-line editorconfig add-node-modules-path flymake-cursor lsp-python-ms modus-themes modus-vivendi-theme npm-mode mini-frame prettier-js lsp-ui lsp-mode modus-operandi-theme magit company web-mode json-mode expand-region which-key exec-path-from-shell use-package))
 '(tramp-ssh-controlmaster-options
	 "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p -o ControlMaster=auto -o ControlPersist=yes" t)
 '(tramp-use-ssh-controlmaster-options nil)
 '(zoom-ignored-buffer-name-regexps '("^*calc"))
 '(zoom-ignored-buffer-names '("zoom.el"))
 '(zoom-ignored-major-modes '(dired-mode markdown-mode))
 '(zoom-mode t nil (zoom))
 '(zoom-size '(0.618 . 0.618)))

;; Override balance windows 
(global-set-key (kbd "C-x +") 'zoom)

;; '(zoom-ignore-predicates '((lambda () (> (count-lines (point-min) (point-max)) 20)))))

;; Scroll enhancements 3-16-2022
;; Per https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs
(setq scroll-preserve-screen-position t
      scroll-conservatively 0
      maximum-scroll-margin 0.5
      scroll-margin 99999)

;; Highlight Indent Guides 3-16-2022
(use-package highlight-indent-guides
	:ensure t)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)



;; hl-line+  3-16-2022 
;; (use-package hl-line+
;; 	:load-path "~/.emacs.d/packages/")
;; (toggle-hl-line-when-idle 1)

(use-package hl-line+
	:load-path "~/.emacs.d/packages/"
  :hook
  (window-scroll-functions . hl-line-flash)
  (focus-in . hl-line-flash)
  (post-command . hl-line-flash)

  :custom
  (global-hl-line-mode nil)
  (hl-line-flash-show-period 0.5)
  (hl-line-inhibit-highlighting-for-modes '(dired-mode))
  (hl-line-overlay-priority -100) ;; sadly, seems not observed by diredfl
  )


;; Undo-tree 3-15-2022
(use-package undo-tree
	:ensure t)
(global-undo-tree-mode)
;; End Undo-tree

;; Magit 3-13-2022
(use-package magit
  :init
  (message "Loading Magit!")
  :config
  (message "Loaded Magit!")
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))

;; Projectile 3-13-2022
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))


;; End Projectile


;; RecentF debugging
(require 'recentf)

;; get rid of `find-file-read-only' and replace it with something
;; more useful.
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)

;; enable recent files mode.
(recentf-mode t)

; 50 files ought to be enough.
(setq recentf-max-saved-items 50)

;; End Recentf
 

;; 3-12-2022
;; https://readingworldmagazine.com/emacs/2021-11-14-emacs-how-to-find-just-about-anything-on-your-computer-2/
;; Adding counsel,  ivy-rich, swiper

(use-package counsel
;:ensure t
:after ivy
:config
; Don't start searches with ^
(setq ivy-initial-inputs-alist nil)
(counsel-mode)
;show org-tags in counsel searches
(setq counsel-org-headline-display-tags t)
;show org-todos in counsel searches
(setq counsel-org-headline-display-todo t)

(define-key ivy-switch-buffer-map (kbd "C-d") 'mu-ivy-kill-buffer)
;ivy-todo calls org-set-tags-command, remap to counsel-org-tag
(global-set-key [remap org-set-tags-command] #'counsel-org-tag)

:bind (
([remap describe-function] . counsel-describe-function)
([remap describe-command] . helpful-command)
([remap describe-variable] . counsel-describe-variable)
([remap describe-key] . helpful-key)
("M-x" . counsel-M-x)
("C-x b" . counsel-switch-buffer)
("C-x C-b" . counsel-ibuffer)
("C-x C-m" . counsel-imenu) ;headers level 1
("C-x C-d" . counsel-bookmarked-directory)
("C-x f" .  helm-org-rifle-current-buffer)
("C-x r" .  helm-org-rifle)
("C-x C-r" . counsel-recentf)
("C-x C-f" . counsel-find-file)
("C-h b" . counsel-descbinds)
("M-y" . counsel-yank-pop)
("M-SPC" . counsel-shell-history)
:map minibuffer-local-map
("C-r" . 'counsel-minibuffer-history)
("C-d" . ivy-switch-buffer-kill); d for delete
);end bind
);end counsel

;;(use-package recentf
;;  :ensure t)
;;(recentf-mode 1)

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
:after (:and ivy counsel)
;:ensure t
;:commands (counsel-mode)
:init
(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
(ivy-rich-mode)
:config
;these are david wilsons configurations
(setq ivy-format-function #'ivy-format-function-line)
(setq ivy-rich-display-transformers-list
(plist-put ivy-rich-display-transformers-list
    'ivy-switch-buffer
    '(:columns
    ((ivy-rich-candidate (:width 40))
    (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
    (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
    (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
    (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                     :predicate
                     (lambda (cand)
                       (if-let ((buffer (get-buffer cand)))
                           ;; Don't mess with EXWM buffers
                           (with-current-buffer buffer
                             (not (derived-mode-p 'exwm-mode))))))))

;:hook
;;(after-init . ivy-rich-mode)
)
;end ivy-rich
;;(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)


(use-package swiper
  :bind* (("C-s" . swiper)
          ;("C-r" . swiper)
          ("C-M-s" . swiper-all)
	  ("M-s" . swiper-thing-at-point))
  :bind
  (:map read-expression-map
        ("C-r" . counsel-minibuffer-history))
);end swiper



(use-package yasnippet
	:ensure t)
(yas-global-mode 1)

;; https://github.com/smihica/emmet-mode
(use-package emmet-mode
	:ensure t)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
;; If you want the cursor to be positioned between first empty quotes after expanding:
(setq emmet-move-cursor-between-quotes t) ;; default nil
;; (add-to-list 'emmet-jsx-major-modes 'your-jsx-major-mode)
;; jsx-mode
;; rjsx-mode
;; js-jsx-mode
;; js2-jsx-mode
;; js-mode



;; 3-5-2022
;; loccur
(use-package loccur
	:ensure t)

;; defines shortcut for loccur of the current word
(define-key global-map [(control o)] 'loccur-current)
;; defines shortcut for the interactive loccur command
(define-key global-map [(control meta o)] 'loccur)
;; defines shortcut for the loccur of the previously found word
(define-key global-map [(control shift o)] 'loccur-previous-match)

(define-key global-map (kbd "M-s C-o") 'loccur-isearch)
(define-key isearch-mode-map (kbd "C-o") 'loccur-isearch)



;; AVY 3-5-2022
(use-package avy
	:ensure t)
(global-set-key (kbd "C-:") 'avy-goto-char)
(global-set-key (kbd "C-'") 'avy-goto-char-2)
;; input zero chars, jump to a line start with a tree
(global-set-key (kbd "M-g f") 'avy-goto-line)
;;Input zero chars, jump to a word start with a tree.
(global-set-key (kbd "M-g e") 'avy-goto-word-0)

;; ace-window
;; 3-7-2022
(use-package ace-window
	:ensure t)
(global-set-key (kbd "M-o") 'ace-window)
(defvar aw-dispatch-alist
  '((?x aw-delete-window "Delete Window")
	(?m aw-swap-window "Swap Windows")
	(?M aw-move-window "Move Window")
	(?c aw-copy-window "Copy Window")
	(?j aw-switch-buffer-in-window "Select Buffer")
	(?n aw-flip-window)
	(?u aw-switch-buffer-other-window "Switch Buffer Other Window")
	(?c aw-split-window-fair "Split Fair Window")
	(?v aw-split-window-vert "Split Vert Window")
	(?b aw-split-window-horz "Split Horz Window")
	(?o delete-other-windows "Delete Other Windows")
	(?? aw-show-dispatch-help))
  "List of actions for `aw-dispatch-default'.")




;; IDO
;; (setq ido-everywhere            t
;;       ido-enable-prefix         nil
;;       ido-enable-flex-matching  t
;;       ido-auto-merge-work-directories-length nil
;;       ;;ido-use-filename-at-point t
;;       ido-max-prospects         10
;;       ido-create-new-buffer     'always
;;       ;; ido-use-virtual-buffers   t
;;       ;; ido-handle-duplicate-virtual-buffers 2
;;       ido-default-buffer-method 'selected-window
;;       ido-default-file-method   'selected-window)

;; (setq ido-decorations (quote ("\n" "" "\n" "\n ..." "[" "]" "
;;   [No match]" " [Matched]" " [Not readable]" " [Too big]" "
;;   [Confirm]")))
;; (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
;; (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)

;; (defun ido-my-keys ()
;;   (define-key ido-completion-map (kbd "<up>")   'ido-prev-match)
;;   (define-key ido-completion-map (kbd "<down>") 'ido-next-match))

;; (add-hook 'ido-setup-hook 'ido-my-keys)
;; (ido-mode 1)

;; Icomplete
;; (setq icomplete-show-matches-on-no-input t)
;; (setq icomplete-in-buffer t)
;; (icomplete-mode 1)

;; FIDO
;;(fido-mode 1)


(use-package treemacs)



;; Enable vertico
;; https://github.com/minad/vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Optionally use the `orderless' completion style. See
;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
;; dispatcher. Additionally enable `partial-completion' for file path
;; expansion. `partial-completion' is important for wildcard support.
;; Multiple files can be opened at once with `find-file' if you enter a
;; wildcard. You may also give the `initials' completion style a try.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; END vertico setup


(use-package orderless
  :ensure t
  :custom (completion-styles '(orderless)))


;; Enable richer annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))


(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))





;; ;; Enable icomplete-vertical (Global Emacs minor mode to display icomplete candidates vertically)
;; ;; See https://github.com/oantolin/icomplete-vertical#installation-and-usage
;; (use-package icomplete-vertical
;;   :ensure t  
;;   :config
;;   :hook (icomplete-minibuffer-setup . icomplete-vertical-mode))



;; Built-in project package
(require 'project)
(global-set-key (kbd "C-x p f") #'project-find-file)

;; I need the hash on uk keyboard
;;(global-set-key (kbd "M-3") (lambda () (interactive) (insert "#")))

;; Go to next error
(global-set-key (kbd "C-c N") #'flymake-goto-next-error)
;; Go to previous error
(global-set-key (kbd "C-c P") #'flymake-goto-prev-error)

;; (defun luke/select-project ()
;;   (interactive)
;;   (let (
;; 	(projects (directory-files "~/Projects"))))
;;   (let (
